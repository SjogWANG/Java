//abstract class Shape, can be declared as interface aswell
package factorypatternexample;

/**
 *
 * @author Shan
 */

public abstract class Shape {
    
    abstract void draw();
}



//child class Circle
package factorypatternexample;

/**
 *
 * @author Shan
 */
public class Circle extends Shape { //inheritate from abstract class shape
    
    Circle(){
        System.out.println("circle instance created!");
    }
    
    @Override
    void draw(){
        System.out.println("draw a circle!");
    }
}

//child class Line
package factorypatternexample;

/**
 *
 * @author Shan
 */
public class Line extends Shape{
     Line(){
        System.out.println("line instance created!");
    }
    
    @Override
    void draw(){
        System.out.println("draw a line!");
    }
}

//child class rectangle

package factorypatternexample;

/**
 *
 * @author Shan
 */
public class Rectangle extends Shape{
    Rectangle(){
        System.out.println("rectangle instance created!");
    }
    
    @Override
    void draw(){
        System.out.println("draw a rectangle!");
    }
}

//factory class
package factorypatternexample;
import java.util.*;
import java.io.*;

/**
 *
 * @author Shan
 */
public class ShapeFactory{
    //create properties object to load config file
    //properties file format must be porpertyName=propertyValue or propertyName:propertyValue
    //https://docs.oracle.com/cd/E23095_01/Platform.93/ATGProgGuide/html/s0204propertiesfileformat01.html
    private static Properties shapes = new Properties();
    
    //static code block, will be executed when class loaded
//    static{
//        //read config file as stream
//        InputStream in = ShapeFactory.class.getResourceAsStream("panel.properties");
//
//        //properties.load
//        try{
//            shapes.load(in);
//        }
//        catch(IOException e){
//            throw new RuntimeException(e);
//        }
//        
//        
//    }
    
    public  static void loadConfig()throws Exception{
    
        InputStream in = ShapeFactory.class.getResourceAsStream("panel.properties");
        shapes.load(in);
        in.close();
    }
    
    //create individual class instance
    public static Shape getShapes(int type) throws Exception{
        
        String className = (String)shapes.getProperty(String.valueOf(type));
        
        return (Shape)Class.forName(className).newInstance();
    
        
    }
}

//client class
package factorypatternexample;
import java.util.*;
import java.io.*;
/**
 *
 * @author Shan
 */
public class FactoryPatternExample {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        //read input from stdin
        Scanner scanner = new Scanner(System.in);
        System.out.println("Please input Shape Type: 1: circle; 2: rectangle; 3: line");
        while(true){
            int type = scanner.nextInt();
            if(type == 99){
                break;
            }
            try{
                ShapeFactory.loadConfig();
                Shape myShape = ShapeFactory.getShapes(type);
                if(myShape == null){
                    System.out.println("Input type not exist!");
                }
                else{
                    myShape.draw();
                }
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }
        scanner.close();
        
    }
    
}